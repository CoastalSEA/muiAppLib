function lineIndex = gd_findline(plines, queryPoint)
%
%-------function help------------------------------------------------------
% NAME
%   gd_findline.m
% PURPOSE
%   find which line a given point lies on when there are multiple lines
%   separated by NaN values in a struct array of points
% USAGE
%   lineIndex = gd_findline(plines, queryPoint);
% INPUTS
%   plines - is a struct array of x,y points defining lines and each line is 
%            separated by a NaN x,y point.
%   queryPoint - is an x,y struct of the point to be tested
% OUTPUTS
%  lineIndex - index of line on which point lies  
% SEE ALSO
%   called in gd_digitisepoints and gd_editlines
%
% Code generated by Online Matlab Code Generator (31/1/25)
% CoastalSEA (c) Jan 2025
%--------------------------------------------------------------------------
% 
    lineIndex = -1; % Default to -1 if no line is found
    numLines = 0;
    currentLine = [];

    for i = 1:length(plines)
        if isnan(plines(i).x) %|| isnan(points(i).y)
            if ~isempty(currentLine)
                numLines = numLines + 1;
                % Check if the queryPoint lies on the current line
                if isPointOnLine(currentLine, queryPoint)
                    lineIndex = numLines;
                    return;
                end
                currentLine = []; % Reset for the next line
            end
        else
            currentLine = [currentLine, plines(i)]; %#ok<AGROW> 
        end
    end

    % Check the last line if it exists
    if ~isempty(currentLine)
        numLines = numLines + 1;
        if isPointOnLine(currentLine, queryPoint)
            lineIndex = numLines;
        end
    end
end

%%
function isOnLine = isPointOnLine(line, point)
    isOnLine = false;
    for i = 1:size(line, 2) - 1
        p1 = line(i);
        p2 = line(i + 1);
        if isPointBetween(p1, p2, point)
            isOnLine = true;
            return;
        end
    end
end

%%
function isBetween = isPointBetween(p1, p2, point)
    crossProduct = (point.y - p1.y) * (p2.x - p1.x) - (point.x - p1.x) * (p2.y - p1.y);
    if abs(crossProduct) > 1e-10
        isBetween = false; % Not collinear
        return;
    end

    dotProduct = (point.x - p1.x) * (p2.x - p1.x) + (point.y - p1.y) * (p2.y - p1.y);
    if dotProduct < 0
        isBetween = false; % Point is before p1
        return;
    end

    squaredLengthBA = (p2.x - p1.x)^2 + (p2.y - p1.y)^2;
    if dotProduct > squaredLengthBA
        isBetween = false; % Point is after p2
        return;
    end

    isBetween = true; % Point is on the line segment
end
