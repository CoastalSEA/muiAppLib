function points = gd_reorder_points(inpoints,startpoint)
%
%-------function help------------------------------------------------------
% NAME
%   gd_reorder_points.m
% PURPOSE
%   reorder the points in a vector or an x,y line vector so that it always
%   progresses to the nearest point
% USAGE
%   points = gd_reorder_points(inpoints,startpoint)
% INPUTS
%   inpoints - a vector of points or a struct of x,y points
%   startpoint - point to begin search from
% OUTPUTS
%   points - points in same format as input reordered to be proximate
% NOTES
%
% SEE ALSO
%   
%
% Code generated by Online Matlab Code Generator (31/1/25)
% CoastalSEA (c) Jan 2025
%--------------------------------------------------------------------------
% 
    if isstruct(inpoints)
        points = struct_order(inpoints,startpoint);
    elseif isvector(inpoints)
        points = vector_order(inpoints,startpoint);
    else
        warndlg('Input points data type not recognised in reorder_points');
        return;
    end
end

%%
function orderedPoints = struct_order(points,startPoint)
    % Calculate distances from the starting point
    points = cell2mat(struct2cell(points)');    %struct to [Nx2] array

    distances = sqrt((points(:,1) - startPoint(1)).^2 + (points(:,2) - startPoint(2)).^2);
    
    % Initialize ordered points array
    orderedPoints = startPoint;
    %currentPoint = startPoint;
    
    % Create a logical index for remaining points
    remainingPoints = true(size(points, 1), 1);
    
    % Loop until all points are ordered
    for i = 1:size(points, 1)
        % Set distances for already ordered points to infinity
        distances(~remainingPoints) = inf;
        
        % Find the nearest point
        [~, idx] = min(distances);
        
        % Update the ordered points
        orderedPoints = [orderedPoints; points(idx,:)]; %#ok<AGROW> 
        
        % Mark the point as ordered
        remainingPoints(idx) = false;
        
        % Update current point
        currentPoint = points(idx,:);
        
        % Recalculate distances from the current point
        distances = sqrt((points(:,1) - currentPoint(1,1)).^2 + (points(:,2) - currentPoint(1,2)).^2);
    end
    
    % Convert orderedPoints to struct array
    orderedPoints = struct('x', orderedPoints(:, 1), 'y', orderedPoints(:, 2));
end

%%
function ordered_points = vector_order(points,start_point)
    % Import necessary libraries
    % No additional libraries are needed for this function

    % Initialize variables
    ordered_points = start_point; 
    remaining_points = points;

    % Remove the starting point from the remaining points
    remaining_points(ismember(remaining_points, start_point, 'rows'), :) = [];

    % Set the current point to the starting point
    current_point = start_point;

    % Loop until all points are ordered
    while ~isempty(remaining_points)
        % Calculate the distance from the current point to all remaining points
        distances = sqrt(sum((remaining_points - current_point).^2, 2));
        
        % Find the index of the nearest point
        [~, nearest_index] = min(distances);
        
        % Update the current point and add it to the ordered list
        current_point = remaining_points(nearest_index, :);
        ordered_points = [ordered_points; current_point]; %#ok<AGROW> 
        
        % Remove the nearest point from the remaining points
        remaining_points(nearest_index, :) = [];
    end
end